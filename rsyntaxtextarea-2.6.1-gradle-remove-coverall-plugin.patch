--- RSyntaxTextArea-2.6.1/build.gradle.coverall
+++ RSyntaxTextArea-2.6.1/build.gradle
@@ -1,6 +1,6 @@
-['java', 'checkstyle', 'osgi', 'distribution', 'maven', 'signing'].each { apply plugin: it }
+['java', 'osgi', 'distribution', 'maven'].each { apply plugin: it }
 // Jacoco and a coveralls upload plugin needed for publishing coverage results
-['jacoco', 'com.github.kt3k.coveralls'].each { apply plugin: it }
+//['jacoco', 'com.github.kt3k.coveralls'].each { apply plugin: it }
 
 // We require building with JDK 8 or later.  We turn off doclint since our
 // generated *TokenMakers have horrible documentation (see https://github.com/jflex-de/jflex/issues/182)
@@ -29,22 +29,22 @@
 	repositories {
 		mavenCentral()
 	}
-	dependencies {
-		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
-	}
-}
-
-jacocoTestReport {
-	reports {
-		xml.enabled = true // coveralls plugin depends on xml format report
-		html.enabled = true
-	}
-}
-
-checkstyle {
-	toolVersion = '7.0'
-	configFile = 'config/checkstyle/checkstyle.xml' as File
-}
+//	dependencies {
+//		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
+//	}
+}
+
+//jacocoTestReport {
+//	reports {
+//		xml.enabled = true // coveralls plugin depends on xml format report
+//		html.enabled = true
+//	}
+//}
+
+//checkstyle {
+//	toolVersion = '7.0'
+//	configFile = 'config/checkstyle/checkstyle.xml' as File
+//}
 
 compileJava {
 	sourceCompatibility javaVersion
@@ -125,96 +125,96 @@
 artifacts {
 	archives jar, javadocJar, sourceJar
 }
-signing {
-	// Don't require signing for e.g. ./gradlew install
-	required { gradle.taskGraph.hasTask("uploadArchives") }
-	sign configurations.archives
-}
+//signing {
+//	// Don't require signing for e.g. ./gradlew install
+//	required { gradle.taskGraph.hasTask("uploadArchives") }
+//	sign configurations.archives
+//}
 repositories {
 	mavenCentral()
 }
-uploadArchives {
-	repositories {
-		mavenDeployer {
-			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-			if (project.hasProperty('upload') && Boolean.parseBoolean(upload)) { // gradlew uploadArchives -Pupload=true
-				repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
-					authentication(userName: ossrhUsername, password: ossrhPassword)
-				}
-				snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
-					authentication(userName: ossrhUsername, password: ossrhPassword)
-				}
-			}
-			else {
-				repository(url: 'file:///' + projectDir + '/../localMavenRepo')
-			}
-			pom {
-				groupId = 'com.fifesoft'
-				name = 'rsyntaxtextarea'
-				project {
-					parent {
-						groupId 'org.sonatype.oss'
-						artifactId 'oss-parent'
-						version '7'
-						relativePath ''
-					}
-					
-					groupId 'com.fifesoft'
-					artifactId 'rsyntaxtextarea'
-					packaging 'jar'
-					
-					name 'rsyntaxtextarea'
-					description 'RSyntaxTextArea is the syntax highlighting text editor for Swing applications. ' +
-					    'Features include syntax highlighting for 40+ languages, code folding, code completion, ' +
-						'regex find and replace, macros, code templates, undo/redo, line numbering and bracket ' +
-						'matching.'
-					
-					inceptionYear '2003'
-					url 'http://www.fifesoft.com/rsyntaxtextarea/'
-					licenses {
-						license {
-							name 'Modified BSD License'
-							url 'http://fifesoft.com/rsyntaxtextarea/RSyntaxTextArea.License.txt'
-							distribution 'repo'
-						}
-					}
-					
-					scm {
-						url 'https://github.com/bobbylight/RSyntaxTextArea'
-						connection 'scm:git:git://github.com/bobbylight/RSyntaxTextArea'
-						developerConnection 'scm:git:git@github.com:bobbylight/RSyntaxTextArea'
-						if (!project.version.endsWith('-SNAPSHOT')) {
-							tag project.version
-						}
-					}
-					
-					developers {
-						developer {
-							name 'Robert Futrell'
-							url 'http://www.fifesoft.com'
-							organization = 'Fifesoft' /* https://issues.gradle.org/browse/GRADLE-1200 */
-							organizationUrl 'http://www.fifesoft.com/'
-							roles {
-								role 'architect'
-								role 'developer'
-							}
-							timezone '0'
-						}
-					}
-					
-					// Ugh, have to do this for the "build" section
-					// http://stackoverflow.com/questions/27975786/trouble-injecting-the-build-block-while-exporting-a-maven-pom-xml-file-from-grad
-					withXml {
-						def pluginNode = asNode().appendNode('build').appendNode('plugins').appendNode('plugin')
-						pluginNode.appendNode('artifactId', 'maven-compiler-plugin')
-						pluginNode.appendNode('version', '3.5.1')
-						def executionNode = pluginNode.appendNode('executions').appendNode('execution')
-						executionNode.appendNode('id', 'default-compile')
-						executionNode.appendNode('configuration').appendNode('source', javaVersion).
-						      parent().appendNode('target', javaVersion)
-					}
-				}
-			}
-		}
-	}
-}
+//uploadArchives {
+//	repositories {
+//		mavenDeployer {
+//			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+//			if (project.hasProperty('upload') && Boolean.parseBoolean(upload)) { // gradlew uploadArchives -Pupload=true
+//				repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
+//					authentication(userName: ossrhUsername, password: ossrhPassword)
+//				}
+//				snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
+//					authentication(userName: ossrhUsername, password: ossrhPassword)
+//				}
+//			}
+//			else {
+//				repository(url: 'file:///' + projectDir + '/../localMavenRepo')
+//			}
+//			pom {
+//				groupId = 'com.fifesoft'
+//				name = 'rsyntaxtextarea'
+//				project {
+//					parent {
+//						groupId 'org.sonatype.oss'
+//						artifactId 'oss-parent'
+//						version '7'
+//						relativePath ''
+//					}
+//					
+//					groupId 'com.fifesoft'
+//					artifactId 'rsyntaxtextarea'
+//					packaging 'jar'
+//					
+//					name 'rsyntaxtextarea'
+//					description 'RSyntaxTextArea is the syntax highlighting text editor for Swing applications. ' +
+//					    'Features include syntax highlighting for 40+ languages, code folding, code completion, ' +
+//						'regex find and replace, macros, code templates, undo/redo, line numbering and bracket ' +
+//						'matching.'
+//					
+//					inceptionYear '2003'
+//					url 'http://www.fifesoft.com/rsyntaxtextarea/'
+//					licenses {
+//						license {
+//							name 'Modified BSD License'
+//							url 'http://fifesoft.com/rsyntaxtextarea/RSyntaxTextArea.License.txt'
+//							distribution 'repo'
+//						}
+//					}
+//					
+//					scm {
+//						url 'https://github.com/bobbylight/RSyntaxTextArea'
+//						connection 'scm:git:git://github.com/bobbylight/RSyntaxTextArea'
+//						developerConnection 'scm:git:git@github.com:bobbylight/RSyntaxTextArea'
+//						if (!project.version.endsWith('-SNAPSHOT')) {
+//							tag project.version
+//						}
+//					}
+//					
+//					developers {
+//						developer {
+//							name 'Robert Futrell'
+//							url 'http://www.fifesoft.com'
+//							organization = 'Fifesoft' /* https://issues.gradle.org/browse/GRADLE-1200 */
+//							organizationUrl 'http://www.fifesoft.com/'
+//							roles {
+//								role 'architect'
+//								role 'developer'
+//							}
+//							timezone '0'
+//						}
+//					}
+//					
+//					// Ugh, have to do this for the "build" section
+//					// http://stackoverflow.com/questions/27975786/trouble-injecting-the-build-block-while-exporting-a-maven-pom-xml-file-from-grad
+//					withXml {
+//						def pluginNode = asNode().appendNode('build').appendNode('plugins').appendNode('plugin')
+//						pluginNode.appendNode('artifactId', 'maven-compiler-plugin')
+//						pluginNode.appendNode('version', '3.5.1')
+//						def executionNode = pluginNode.appendNode('executions').appendNode('execution')
+//						executionNode.appendNode('id', 'default-compile')
+//						executionNode.appendNode('configuration').appendNode('source', javaVersion).
+//						      parent().appendNode('target', javaVersion)
+//					}
+//				}
+//			}
+//		}
+//	}
+//}
